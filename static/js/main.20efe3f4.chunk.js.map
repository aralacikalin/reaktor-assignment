{"version":3,"sources":["logo.svg","components/Stat.jsx","containers/GlovesPage.jsx","components/nav.jsx","containers/FacemasksPage.jsx","containers/BeaniesPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stat","props","state","status","fetch","this","id","then","res","json","data","setState","Component","GlovesPage","ismounted","handleChangePage","event","newPage","page","handleChangeRowsPerPage","rowsPerPage","parseInt","target","value","gloves","console","log","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","scope","name","manufacturer","type","price","color","toUpperCase","TablePagination","rowsPerPageOptions","count","length","onChangePage","Nav","username","handleChange","bind","handleRedirect","a","window","location","pathname","newValue","to","square","Tabs","undefined","indicatorColor","textColor","onChange","scrollButtons","variant","Tab","label","FacemasksPage","BeaniesPage","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20efe3f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nimport React, { Component } from 'react';\r\n\r\n\r\nclass Stat extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            status:\"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`https://calm-temple-69565.herokuapp.com/ava/${this.props.id}`).then(res=>res.json()).then(data=>{this.setState({status:data.status}) })\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.state.status}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stat;\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport Stat from \"../components/Stat\"\r\n\r\n\r\nclass GlovesPage extends Component {\r\n    ismounted=false\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            gloves:[],\r\n            page:0,\r\n            rowsPerPage:15\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://calm-temple-69565.herokuapp.com/gloves\").then(res=>res.json()).then(data=>{this.setState({gloves:data},()=>{console.log(this.state.gloves)})})\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page:newPage});\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage:parseInt(event.target.value, 10)});\r\n        this.setState({page:0});\r\n\r\n    };\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table  size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Dessert (100g serving)</TableCell>\r\n                            <TableCell align=\"right\">name</TableCell>\r\n                            <TableCell align=\"right\">manufacturer</TableCell>\r\n                            <TableCell align=\"right\">type</TableCell>\r\n                            <TableCell align=\"right\">price</TableCell>\r\n                            <TableCell align=\"right\">color</TableCell>\r\n                            <TableCell align=\"right\">stock</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.gloves.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage) .map((row) => (\r\n                            <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.manufacturer}</TableCell>\r\n                            <TableCell align=\"right\">{row.type}</TableCell>\r\n                            <TableCell align=\"right\">{row.price}</TableCell>\r\n                            <TableCell align=\"right\">{row.color}</TableCell>\r\n                            <TableCell align=\"right\"><Stat id={row.id.toUpperCase()}/></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    rowsPerPageOptions={[10, 15, 20]}\r\n                    count={this.state.gloves.length}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GlovesPage;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { Button } from '@material-ui/core';\r\n\r\nclass Nav extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:null,\r\n            username:null\r\n        }\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.handleRedirect=this.handleRedirect.bind(this);\r\n    }\r\n\r\n    async componentDidMount(){\r\n        if(window.location.pathname===\"/reaktor-assignment/gloves\"){\r\n            this.setState({value:0})\r\n        }\r\n        else if(window.location.pathname===\"/reaktor-assignment/beanies\"){\r\n            this.setState({value:1})\r\n        }\r\n        else if(window.location.pathname===\"/reaktor-assignment/facemasks\"){\r\n            this.setState({value:2})\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    handleChange(event,newValue){\r\n        this.setState({value:newValue})\r\n        \r\n    }\r\n\r\n    handleRedirect(){\r\n        if(this.state.value===0){\r\n            return(<Redirect to=\"/reaktor-assignment/gloves\"/>)\r\n        }\r\n        else if(this.state.value===1){\r\n            return(<Redirect to=\"/reaktor-assignment/beanies\"/>)\r\n        }\r\n        else if(this.state.value===2){\r\n            return(<Redirect to=\"/reaktor-assignment/facemasks\"/>)\r\n        }\r\n        else{\r\n            return(null)\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <Paper square>\r\n            <Tabs\r\n                value={this.state.value|undefined}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                onChange={this.handleChange}\r\n                scrollButtons=\"on\"\r\n                variant=\"scrollable\"\r\n            >\r\n            <Tab label=\"gloves\" />\r\n            <Tab label=\"beanies\" />\r\n            <Tab label=\"facemasks\" />\r\n            </Tabs>\r\n            {this.handleRedirect()}\r\n        </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport Stat from \"../components/Stat\"\r\n\r\n\r\nclass FacemasksPage extends Component {\r\n    ismounted=false\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            gloves:[],\r\n            page:0,\r\n            rowsPerPage:15\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://calm-temple-69565.herokuapp.com/facemasks\").then(res=>res.json()).then(data=>{this.setState({gloves:data},()=>{console.log(this.state.gloves)})})\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page:newPage});\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage:parseInt(event.target.value, 10)});\r\n        this.setState({page:0});\r\n\r\n    };\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table  size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Dessert (100g serving)</TableCell>\r\n                            <TableCell align=\"right\">name</TableCell>\r\n                            <TableCell align=\"right\">manufacturer</TableCell>\r\n                            <TableCell align=\"right\">type</TableCell>\r\n                            <TableCell align=\"right\">price</TableCell>\r\n                            <TableCell align=\"right\">color</TableCell>\r\n                            <TableCell align=\"right\">stock</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.gloves.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage) .map((row) => (\r\n                            <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.manufacturer}</TableCell>\r\n                            <TableCell align=\"right\">{row.type}</TableCell>\r\n                            <TableCell align=\"right\">{row.price}</TableCell>\r\n                            <TableCell align=\"right\">{row.color}</TableCell>\r\n                            <TableCell align=\"right\"><Stat id={row.id.toUpperCase()}/></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    rowsPerPageOptions={[10, 15, 20]}\r\n                    count={this.state.gloves.length}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FacemasksPage;\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport Stat from \"../components/Stat\"\r\n\r\n\r\nclass BeaniesPage extends Component {\r\n    ismounted=false\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state={\r\n            gloves:[],\r\n            page:0,\r\n            rowsPerPage:15\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://calm-temple-69565.herokuapp.com/beanies\").then(res=>res.json()).then(data=>{this.setState({gloves:data},()=>{console.log(this.state.gloves)})})\r\n    }\r\n\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({page:newPage});\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({rowsPerPage:parseInt(event.target.value, 10)});\r\n        this.setState({page:0});\r\n\r\n    };\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table  size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Dessert (100g serving)</TableCell>\r\n                            <TableCell align=\"right\">name</TableCell>\r\n                            <TableCell align=\"right\">manufacturer</TableCell>\r\n                            <TableCell align=\"right\">type</TableCell>\r\n                            <TableCell align=\"right\">price</TableCell>\r\n                            <TableCell align=\"right\">color</TableCell>\r\n                            <TableCell align=\"right\">stock</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.gloves.slice(this.state.page * this.state.rowsPerPage, this.state.page * this.state.rowsPerPage + this.state.rowsPerPage) .map((row) => (\r\n                            <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.name}</TableCell>\r\n                            <TableCell align=\"right\">{row.manufacturer}</TableCell>\r\n                            <TableCell align=\"right\">{row.type}</TableCell>\r\n                            <TableCell align=\"right\">{row.price}</TableCell>\r\n                            <TableCell align=\"right\">{row.color}</TableCell>\r\n                            <TableCell align=\"right\"><Stat id={row.id.toUpperCase()}/></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    component=\"div\"\r\n                    rowsPerPageOptions={[10, 15, 20]}\r\n                    count={this.state.gloves.length}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    rowsPerPage={this.state.rowsPerPage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BeaniesPage;\r\n\r\n\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Redirect, Route } from 'react-router-dom'\nimport GlovesPage from './containers/GlovesPage';\nimport Nav from './components/nav';\nimport FacemasksPage from './containers/FacemasksPage';\nimport BeaniesPage from './containers/BeaniesPage';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Nav/>\n      <Route exact path=\"/reaktor-assignment/gloves\" component={GlovesPage} />\n      <Route exact path=\"/reaktor-assignment/facemasks\" component={FacemasksPage} />\n      <Route exact path=\"/reaktor-assignment/beanies\" component={BeaniesPage} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}